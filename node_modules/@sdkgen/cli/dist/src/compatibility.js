"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compatibilityCmd = void 0;
/* eslint-disable no-process-exit */
const parser_1 = require("@sdkgen/parser");
const command_line_args_1 = __importDefault(require("command-line-args"));
const command_line_usage_1 = __importDefault(require("command-line-usage"));
const optionDefinitions = [
    { description: "Specifies the old version", name: "old" },
    { description: "Specifies the new version", name: "new" },
    { alias: "h", description: "Display this usage guide.", name: "help", type: Boolean },
];
function compatibilityCmd(argv) {
    var _a;
    const options = (0, command_line_args_1.default)(optionDefinitions, { argv, partial: true });
    if (options.help) {
        console.log((0, command_line_usage_1.default)([
            {
                content: "sdkgen compatibility --old src/old.sdkgen --new src/new.sdkgen",
                header: "Typical Example",
            },
            {
                header: "Options",
                optionList: optionDefinitions,
            },
            {
                content: "Project home: {underline https://sdkgen.github.io}",
            },
        ]));
        process.exit(0);
    }
    const args = (_a = options._unknown) !== null && _a !== void 0 ? _a : [];
    if (!options.old) {
        options.old = args.shift();
        if (!options.old) {
            console.error("Error: Missing 'old' option.");
            process.exit(1);
        }
    }
    if (!options.new) {
        options.new = args.shift();
        if (!options.new) {
            console.error("Error: Missing 'new' option.");
            process.exit(1);
        }
    }
    if (args.length > 0) {
        console.error("Error: Too many arguments.");
        process.exit(1);
    }
    const astOld = new parser_1.Parser(options.old).parse();
    const astNew = new parser_1.Parser(options.new).parse();
    const issues = (0, parser_1.compatibilityIssues)(astOld, astNew);
    for (const issue of issues) {
        console.log(issue);
    }
    if (issues.length) {
        process.exit(1);
    }
    else {
        console.log("No breaking changes.");
    }
}
exports.compatibilityCmd = compatibilityCmd;
