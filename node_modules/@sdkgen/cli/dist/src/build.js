"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildCmd = void 0;
/* eslint-disable no-process-exit */
const fs_1 = require("fs");
const csharp_generator_1 = require("@sdkgen/csharp-generator");
const dart_generator_1 = require("@sdkgen/dart-generator");
const fsharp_generator_1 = require("@sdkgen/fsharp-generator");
const kotlin_generator_1 = require("@sdkgen/kotlin-generator");
const parser_1 = require("@sdkgen/parser");
const swift_generator_1 = require("@sdkgen/swift-generator");
const typescript_generator_1 = require("@sdkgen/typescript-generator");
const command_line_args_1 = __importDefault(require("command-line-args"));
const command_line_usage_1 = __importDefault(require("command-line-usage"));
const optionDefinitions = [
    { defaultOption: true, description: "Specifies the source file", name: "sources", multiple: true },
    { alias: "o", description: "Specifies the output file", name: "output" },
    { alias: "t", description: "Specifies the target platform and language", name: "target" },
    { alias: "h", description: "Display this usage guide.", name: "help", type: Boolean },
];
function buildCmd(argv) {
    const options = (0, command_line_args_1.default)(optionDefinitions, { argv });
    if (options.help) {
        console.log((0, command_line_usage_1.default)([
            {
                content: "sdkgen src/api.sdkgen -o src/api.ts -t typescript_nodeserver",
                header: "Typical Example",
            },
            {
                content: [
                    "- typescript_nodeserver",
                    "- typescript_nodeclient",
                    "- typescript_web",
                    "- typescript_interfaces",
                    "- flutter",
                    "- csharp_server",
                    "- kotlin_android",
                    "- kotlin_android_without_callbacks",
                    "- swift_ios",
                    "- rxswift_ios",
                ].join("\n"),
                header: "Available targets",
            },
            {
                header: "Options",
                optionList: optionDefinitions,
            },
            {
                content: "Project home: {underline https://sdkgen.github.io}",
            },
        ]));
        process.exit(0);
    }
    if (!options.sources || options.sources.length === 0) {
        console.error("Error: Missing 'sources' option.");
        process.exit(1);
    }
    if (!options.output) {
        console.error("Error: Missing 'output' option.");
        process.exit(1);
    }
    if (!options.target) {
        console.error("Error: Missing 'target' option.");
        process.exit(1);
    }
    const ast = new parser_1.Parser(options.sources).parse();
    for (const warning of ast.warnings) {
        console.error(`WARNING: ${warning}`);
    }
    switch (options.target) {
        case "typescript_nodeserver": {
            (0, fs_1.writeFileSync)(options.output, (0, typescript_generator_1.generateNodeServerSource)(ast));
            break;
        }
        case "typescript_nodeclient": {
            (0, fs_1.writeFileSync)(options.output, (0, typescript_generator_1.generateNodeClientSource)(ast));
            break;
        }
        case "typescript_web": {
            (0, fs_1.writeFileSync)(options.output, (0, typescript_generator_1.generateBrowserClientSource)(ast));
            break;
        }
        case "typescript_interfaces": {
            (0, fs_1.writeFileSync)(options.output, (0, typescript_generator_1.generateTypescriptInterfaces)(ast));
            break;
        }
        case "flutter": {
            (0, fs_1.writeFileSync)(options.output, (0, dart_generator_1.generateDartClientSource)(ast));
            break;
        }
        case "csharp_server": {
            (0, fs_1.writeFileSync)(options.output, (0, csharp_generator_1.generateCSharpServerSource)(ast));
            break;
        }
        case "fsharp_server": {
            (0, fs_1.writeFileSync)(options.output, (0, fsharp_generator_1.generateFSharpServerSource)(ast));
            break;
        }
        case "kotlin_android": {
            (0, fs_1.writeFileSync)(options.output, (0, kotlin_generator_1.generateAndroidClientSource)(ast, true));
            break;
        }
        case "kotlin_android_without_callbacks": {
            (0, fs_1.writeFileSync)(options.output, (0, kotlin_generator_1.generateAndroidClientSource)(ast, false));
            break;
        }
        case "swift_ios": {
            (0, fs_1.writeFileSync)(options.output, (0, swift_generator_1.generateSwiftClientSource)(ast, false));
            break;
        }
        case "rxswift_ios": {
            (0, fs_1.writeFileSync)(options.output, (0, swift_generator_1.generateSwiftClientSource)(ast, true));
            break;
        }
        default: {
            console.error(`Error: Unknown target '${options.target}'`);
            process.exit(1);
        }
    }
}
exports.buildCmd = buildCmd;
