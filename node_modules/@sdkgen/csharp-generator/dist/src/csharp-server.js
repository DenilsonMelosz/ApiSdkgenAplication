"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCSharpServerSource = void 0;
const parser_1 = require("@sdkgen/parser");
const helpers_1 = require("./helpers");
function generateCSharpServerSource(ast) {
    let code = `using System;
using System.Collections.Generic;
using System.Globalization;
using System.Numerics;
using System.Text.Json;
using System.Threading.Tasks;
using static Sdkgen.Runtime;
using static Sdkgen.Context;
using static Sdkgen.Helpers;

namespace SdkgenGenerated
{
    public abstract class Api : BaseApi
    {`;
    for (const op of ast.operations) {
        const returnTypeAngle = op.returnType instanceof parser_1.VoidPrimitiveType ? "" : `<${(0, helpers_1.generateTypeName)(op.returnType)}>`;
        code += `
        public virtual Task${returnTypeAngle} ${(0, helpers_1.capitalize)(op.name)}(${[
            "Context ctx",
            ...op.args.map(arg => `${(0, helpers_1.generateTypeName)(arg.type)} ${(0, helpers_1.ident)(arg.name)}`),
        ].join(", ")})
        {
            return Task.FromException${returnTypeAngle}(new FatalException("Function '${op.name}' not implemented."));
        }
`;
    }
    code += `
        public async Task ExecuteFunction(Context context_, Utf8JsonWriter resultWriter_)
        {
            switch (context_.Name)
            {`;
    for (const op of ast.operations) {
        code += `
                case ${JSON.stringify(op.name)}:
                    {`;
        for (const arg of op.args) {
            code += `
                        JsonElement ${arg.name}Json_;
                        if (!context_.Args.TryGetValue(${JSON.stringify(arg.name)}, out ${arg.name}Json_))
                        {
                            ${arg.type instanceof parser_1.OptionalType
                ? `${arg.name}Json_ = new JsonElement();`
                : `throw new FatalException("'${op.name}().args.${arg.name}' must be set to a value of type ${arg.type.name}.");`}
                        }
                        ${(0, helpers_1.generateTypeName)(arg.type)} ${(0, helpers_1.ident)(arg.name)};
                        ${(0, helpers_1.decodeType)(arg.type, `${arg.name}Json_`, `"${op.name}().args.${arg.name}"`, (0, helpers_1.ident)(arg.name)).replace(/\n/gu, "\n                        ")}`;
        }
        if (op.returnType instanceof parser_1.VoidPrimitiveType) {
            code += `
                        await ${(0, helpers_1.capitalize)(op.name)}(${["context_", ...op.args.map(arg => (0, helpers_1.ident)(arg.name))].join(", ")});
                        resultWriter_.WriteNullValue();`;
        }
        else {
            code += `
                        var result_ = await ${(0, helpers_1.capitalize)(op.name)}(${["context_", ...op.args.map(arg => (0, helpers_1.ident)(arg.name))].join(", ")});
                        ${(0, helpers_1.encodeType)(op.returnType, `result_`, `"${op.name}().ret"`).replace(/\n/gu, "\n                        ")}`;
        }
        code += `
                        return;
                    }`;
    }
    code += `
                default:
                    {
                        throw new FatalException($"Unknown function '{context_.Name}'.");
                    }
            }
        }
`;
    for (const type of ast.structTypes) {
        code += (0, helpers_1.generateStruct)(type);
    }
    for (const type of ast.enumTypes) {
        code += (0, helpers_1.generateEnum)(type);
    }
    code += `
        public string GetAstJson() => @"${JSON.stringify((0, parser_1.astToJson)(ast), null, 4).replace(/"/gu, '""').replace(/\n/gu, "\n        ")}";
    }
`;
    for (const error of ast.errors) {
        code += `
    public class ${error.name}Exception : SdkgenException
    {
        public ${error.name}Exception(string message, Exception? inner = null) : base("${error.name}", message, inner) { }
    }
`;
    }
    code += `
}
`;
    return code;
}
exports.generateCSharpServerSource = generateCSharpServerSource;
