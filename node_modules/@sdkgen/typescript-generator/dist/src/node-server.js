"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateNodeServerSource = void 0;
const parser_1 = require("@sdkgen/parser");
const helpers_1 = require("./helpers");
function generateNodeServerSource(ast) {
    let code = "";
    const hasErrorWithData = ast.errors.some(err => !(err.dataType instanceof parser_1.VoidPrimitiveType));
    const hasErrorWithoutData = ast.errors.filter(err => err.name !== "Fatal").some(err => err.dataType instanceof parser_1.VoidPrimitiveType);
    code += `/* eslint-disable */
import { BaseApiConfig, Context, Fatal${hasErrorWithoutData ? ", SdkgenError" : ""}${hasErrorWithData ? ", SdkgenErrorWithData" : ""} } from "@sdkgen/node-runtime";
export { Fatal } from "@sdkgen/node-runtime";
`;
    if ((0, parser_1.hasType)(ast, parser_1.DecimalPrimitiveType)) {
        code += `import { Decimal } from "decimal.js";\n`;
    }
    code += "\n";
    for (const type of ast.enumTypes) {
        code += (0, helpers_1.generateTypescriptEnum)(type);
        code += "\n";
    }
    for (const type of ast.structTypes) {
        code += (0, helpers_1.generateTypescriptInterface)(type, false);
        code += "\n";
    }
    for (const error of ast.errors) {
        if (error.name === "Fatal") {
            continue;
        }
        code += (0, helpers_1.generateTypescriptErrorClass)(error, false);
        code += "\n";
    }
    code += `export class ApiConfig<ExtraContextT> extends BaseApiConfig<ExtraContextT> {
    declare fn: {${ast.operations
        .map(op => `
        ${op.name}: (ctx: Context & ExtraContextT, args: {${op.args
        .map(arg => `${arg.name}: ${(0, helpers_1.generateTypescriptTypeName)(arg.type, false)}`)
        .join(", ")}}) => Promise<${(0, helpers_1.generateTypescriptTypeName)(op.returnType, false)}>`)
        .join("")}
    }

    astJson = ${JSON.stringify((0, parser_1.astToJson)(ast), null, 4)
        .replace(/"(?<key>\w+)":/gu, "$<key>:")
        .replace(/\n/gu, "\n    ")} as const
}

export const api = new ApiConfig<{}>();
`;
    return code;
}
exports.generateNodeServerSource = generateNodeServerSource;
