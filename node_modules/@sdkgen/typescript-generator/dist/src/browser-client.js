"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateBrowserClientSource = void 0;
const parser_1 = require("@sdkgen/parser");
const helpers_1 = require("./helpers");
function generateBrowserClientSource(ast) {
    let code = "";
    const hasErrorWithData = ast.errors.some(err => !(err.dataType instanceof parser_1.VoidPrimitiveType));
    code += `/* eslint-disable */
import { SdkgenError${hasErrorWithData ? ", SdkgenErrorWithData" : ""}, SdkgenHttpClient } from "@sdkgen/browser-runtime";
`;
    if ((0, parser_1.hasType)(ast, parser_1.DecimalPrimitiveType)) {
        code += `import { Decimal } from "decimal.js-light";\n`;
    }
    code += "\n";
    for (const type of ast.enumTypes) {
        code += (0, helpers_1.generateTypescriptEnum)(type);
        code += "\n";
    }
    for (const type of ast.structTypes) {
        code += (0, helpers_1.generateTypescriptInterface)(type, true);
        code += "\n";
    }
    for (const error of ast.errors) {
        code += (0, helpers_1.generateTypescriptErrorClass)(error, true);
        code += "\n";
    }
    code += `export class ApiClient extends SdkgenHttpClient {
    constructor(baseUrl: string) {
        super(baseUrl, astJson, errClasses);
    }
${ast.operations
        .filter(op => op.annotations.every(ann => !(ann instanceof parser_1.HiddenAnnotation)))
        .map(op => `
    ${op.name}(args${op.args.length === 0 ? "?" : ""}: {${op.args
        .map(arg => `${arg.name}${arg.type.name.endsWith("?") ? "?" : ""}: ${(0, helpers_1.generateTypescriptTypeName)(arg.type, true)}`)
        .join(", ")}}): Promise<${(0, helpers_1.generateTypescriptTypeName)(op.returnType, true)}> { return this.makeRequest("${op.name}", args || {}); }`)
        .join("")}
}\n\n`;
    code += `const errClasses = {\n${ast.errors.map(err => `    ${err.name}`).join(",\n")}\n};\n\n`;
    code += `const astJson = ${JSON.stringify((0, parser_1.astToJson)(ast), null, 4).replace(/"(?<key>\w+)":/gu, "$<key>:")} as const;\n`;
    return code;
}
exports.generateBrowserClientSource = generateBrowserClientSource;
