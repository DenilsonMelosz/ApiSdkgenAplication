"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AstRoot = exports.FunctionOperation = exports.TypeDefinition = exports.StructType = exports.TypeReference = exports.Spread = exports.Field = exports.EnumType = exports.EnumValue = exports.ArrayType = exports.OptionalType = exports.JsonPrimitiveType = exports.XmlPrimitiveType = exports.Base64PrimitiveType = exports.HtmlPrimitiveType = exports.HexPrimitiveType = exports.UuidPrimitiveType = exports.UrlPrimitiveType = exports.EmailPrimitiveType = exports.CnpjPrimitiveType = exports.CpfPrimitiveType = exports.DecimalPrimitiveType = exports.MoneyPrimitiveType = exports.VoidPrimitiveType = exports.BytesPrimitiveType = exports.BoolPrimitiveType = exports.DateTimePrimitiveType = exports.DatePrimitiveType = exports.BigIntPrimitiveType = exports.FloatPrimitiveType = exports.UIntPrimitiveType = exports.IntPrimitiveType = exports.StringPrimitiveType = exports.PrimitiveType = exports.StatusCodeAnnotation = exports.HiddenAnnotation = exports.RestAnnotation = exports.ArgDescriptionAnnotation = exports.ThrowsAnnotation = exports.DescriptionAnnotation = exports.Annotation = exports.ErrorNode = exports.Type = exports.AstNode = void 0;
const token_1 = require("./token");
class AstNode {
    constructor() {
        this.location = new token_1.TokenLocation();
        Object.defineProperty(this, "location", { enumerable: false });
    }
    at(token) {
        this.location = token.location;
        return this;
    }
    atLocation(location) {
        this.location = location;
        return this;
    }
}
exports.AstNode = AstNode;
class Type extends AstNode {
    toJSON() {
        const _a = Object.assign({}, this), { name: _name } = _a, rest = __rest(_a, ["name"]);
        return rest;
    }
}
exports.Type = Type;
class ErrorNode extends AstNode {
    constructor(name, dataType) {
        super();
        this.name = name;
        this.dataType = dataType;
        this.annotations = [];
    }
}
exports.ErrorNode = ErrorNode;
class Annotation extends AstNode {
}
exports.Annotation = Annotation;
class DescriptionAnnotation extends Annotation {
    constructor(text) {
        super();
        this.text = text;
    }
}
exports.DescriptionAnnotation = DescriptionAnnotation;
class ThrowsAnnotation extends Annotation {
    constructor(error) {
        super();
        this.error = error;
    }
}
exports.ThrowsAnnotation = ThrowsAnnotation;
class ArgDescriptionAnnotation extends Annotation {
    constructor(argName, text) {
        super();
        this.argName = argName;
        this.text = text;
    }
}
exports.ArgDescriptionAnnotation = ArgDescriptionAnnotation;
class RestAnnotation extends Annotation {
    constructor(method, path, pathVariables, queryVariables, headers, bodyVariable) {
        super();
        this.method = method;
        this.path = path;
        this.pathVariables = pathVariables;
        this.queryVariables = queryVariables;
        this.headers = headers;
        this.bodyVariable = bodyVariable;
    }
}
exports.RestAnnotation = RestAnnotation;
class HiddenAnnotation extends Annotation {
}
exports.HiddenAnnotation = HiddenAnnotation;
class StatusCodeAnnotation extends Annotation {
    constructor(statusCode) {
        super();
        this.statusCode = statusCode;
    }
}
exports.StatusCodeAnnotation = StatusCodeAnnotation;
class PrimitiveType extends Type {
    toJSON() {
        return this.name;
    }
}
exports.PrimitiveType = PrimitiveType;
class StringPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "string";
    }
}
exports.StringPrimitiveType = StringPrimitiveType;
class IntPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "int";
    }
}
exports.IntPrimitiveType = IntPrimitiveType;
class UIntPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "uint";
    }
}
exports.UIntPrimitiveType = UIntPrimitiveType;
class FloatPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "float";
    }
}
exports.FloatPrimitiveType = FloatPrimitiveType;
class BigIntPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "bigint";
    }
}
exports.BigIntPrimitiveType = BigIntPrimitiveType;
class DatePrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "date";
    }
}
exports.DatePrimitiveType = DatePrimitiveType;
class DateTimePrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "datetime";
    }
}
exports.DateTimePrimitiveType = DateTimePrimitiveType;
class BoolPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "bool";
    }
}
exports.BoolPrimitiveType = BoolPrimitiveType;
class BytesPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "bytes";
    }
}
exports.BytesPrimitiveType = BytesPrimitiveType;
class VoidPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "void";
    }
}
exports.VoidPrimitiveType = VoidPrimitiveType;
class MoneyPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "money";
    }
}
exports.MoneyPrimitiveType = MoneyPrimitiveType;
class DecimalPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "decimal";
    }
}
exports.DecimalPrimitiveType = DecimalPrimitiveType;
class CpfPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "cpf";
    }
}
exports.CpfPrimitiveType = CpfPrimitiveType;
class CnpjPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "cnpj";
    }
}
exports.CnpjPrimitiveType = CnpjPrimitiveType;
class EmailPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "email";
    }
}
exports.EmailPrimitiveType = EmailPrimitiveType;
class UrlPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "url";
    }
}
exports.UrlPrimitiveType = UrlPrimitiveType;
class UuidPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "uuid";
    }
}
exports.UuidPrimitiveType = UuidPrimitiveType;
class HexPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "hex";
    }
}
exports.HexPrimitiveType = HexPrimitiveType;
class HtmlPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "html";
    }
}
exports.HtmlPrimitiveType = HtmlPrimitiveType;
class Base64PrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "base64";
    }
}
exports.Base64PrimitiveType = Base64PrimitiveType;
class XmlPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "xml";
    }
}
exports.XmlPrimitiveType = XmlPrimitiveType;
class JsonPrimitiveType extends PrimitiveType {
    constructor() {
        super(...arguments);
        this.name = "json";
    }
}
exports.JsonPrimitiveType = JsonPrimitiveType;
class OptionalType extends Type {
    constructor(base) {
        super();
        this.base = base;
    }
    get name() {
        return `${this.base.name}?`;
    }
}
exports.OptionalType = OptionalType;
class ArrayType extends Type {
    constructor(base) {
        super();
        this.base = base;
    }
    get name() {
        return `${this.base.name}[]`;
    }
}
exports.ArrayType = ArrayType;
class EnumValue extends AstNode {
    constructor(value) {
        super();
        this.value = value;
        this.annotations = [];
        this.struct = null;
    }
}
exports.EnumValue = EnumValue;
class EnumType extends Type {
    constructor(values) {
        super();
        this.values = values;
    }
    get hasStructValues() {
        return this.values.some(v => v.struct !== null);
    }
}
exports.EnumType = EnumType;
class Field extends AstNode {
    constructor(name, type, secret = false) {
        super();
        this.name = name;
        this.type = type;
        this.secret = secret;
        this.annotations = [];
    }
}
exports.Field = Field;
class Spread extends AstNode {
    constructor(typeReference) {
        super();
        this.typeReference = typeReference;
    }
}
exports.Spread = Spread;
class TypeReference extends Type {
    constructor(name) {
        super();
        this.name = name;
    }
}
exports.TypeReference = TypeReference;
class StructType extends Type {
    constructor(fieldsAndSpreads) {
        super();
        this.fieldsAndSpreads = fieldsAndSpreads;
        this.fields = [];
    }
}
exports.StructType = StructType;
class TypeDefinition extends AstNode {
    constructor(name, type) {
        super();
        this.name = name;
        this.type = type;
        this.annotations = [];
    }
}
exports.TypeDefinition = TypeDefinition;
class FunctionOperation extends AstNode {
    constructor(name, fieldsAndSpreads, returnType) {
        super();
        this.name = name;
        this.fieldsAndSpreads = fieldsAndSpreads;
        this.returnType = returnType;
        this.annotations = [];
        this.args = [];
    }
}
exports.FunctionOperation = FunctionOperation;
class AstRoot {
    constructor(typeDefinitions = [], operations = [], errors = []) {
        this.typeDefinitions = typeDefinitions;
        this.operations = operations;
        this.errors = errors;
        this.structTypes = [];
        this.enumTypes = [];
        this.warnings = [];
    }
}
exports.AstRoot = AstRoot;
