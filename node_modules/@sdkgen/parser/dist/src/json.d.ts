import { AstRoot } from "./ast";
import type { DeepReadonly } from "./utils";
export type TypeDescription = string | Array<string | [string, string]> | Record<string, string>;
type TypeTable = Record<string, TypeDescription | undefined>;
type FunctionTable = Record<string, {
    args: Record<string, string>;
    ret: TypeDescription;
} | undefined>;
type AnnotationJson = {
    type: "description";
    value: string;
} | {
    type: "throws";
    value: string;
} | {
    type: "hidden";
    value: null;
} | {
    type: "statusCode";
    value: number;
} | {
    type: "rest";
    value: {
        bodyVariable: string | null;
        headers: ReadonlyArray<[string, string]>;
        method: string;
        path: string;
        pathVariables: readonly string[];
        queryVariables: readonly string[];
    };
};
export interface AstJson {
    typeTable: TypeTable;
    functionTable: FunctionTable;
    errors: Array<string | [string, string]>;
    annotations: Record<string, AnnotationJson[] | undefined>;
}
export declare function astToJson(ast: AstRoot): AstJson;
export declare function jsonToAst(json: DeepReadonly<AstJson>): AstRoot;
export {};
