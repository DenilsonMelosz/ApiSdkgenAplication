"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidateRecursiveTypes = void 0;
const visitor_1 = require("./visitor");
const ast_1 = require("../ast");
class ValidateRecursiveTypes extends visitor_1.Visitor {
    visit(node) {
        super.visit(node);
        if (node instanceof ast_1.TypeDefinition && this.isRecursiveType(node, node.type)) {
            if (!(node.type instanceof ast_1.StructType || node.type instanceof ast_1.EnumType)) {
                throw new visitor_1.SemanticError(`Type '${node.name}' at ${node.location} is recursive but is not an struct`);
            }
            if (this.isInfinitelyRecursiveType(node, node.type)) {
                throw new visitor_1.SemanticError(`Type '${node.name}' at ${node.location} is infinitely recursive`);
            }
        }
    }
    isRecursiveType(node, type) {
        if (type instanceof ast_1.TypeReference) {
            return node.name === type.name;
        }
        else if (type instanceof ast_1.ArrayType) {
            return this.isRecursiveType(node, type.base);
        }
        else if (type instanceof ast_1.OptionalType) {
            return this.isRecursiveType(node, type.base);
        }
        else if (type instanceof ast_1.StructType) {
            return type.fields.some(field => this.isRecursiveType(node, field.type));
        }
        else if (type instanceof ast_1.EnumType) {
            return type.values.some(value => value.struct && this.isRecursiveType(node, value.struct));
        }
        return false;
    }
    isInfinitelyRecursiveType(node, type) {
        if (type instanceof ast_1.TypeReference) {
            return type.name === node.name;
        }
        else if (type instanceof ast_1.StructType) {
            return type.fields.some(field => this.isInfinitelyRecursiveType(node, field.type));
        }
        else if (type instanceof ast_1.EnumType) {
            return type.values.every(value => value.struct && this.isInfinitelyRecursiveType(node, value.struct));
        }
        return false;
    }
}
exports.ValidateRecursiveTypes = ValidateRecursiveTypes;
