"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GiveStructAndEnumNamesTransformer = void 0;
const transformer_1 = require("./transformer");
const visitor_1 = require("./visitor");
const ast_1 = require("../ast");
class GiveStructAndEnumNamesTransformer extends transformer_1.Transformer {
    constructor() {
        super(...arguments);
        this.path = [];
        this.names = new Map();
    }
    transform(node) {
        if (node instanceof ast_1.TypeDefinition) {
            this.path = [node.name];
            return super.transform(node);
        }
        else if (node instanceof ast_1.ErrorNode) {
            this.path = [`${node.name}Data`];
            return super.transform(node);
        }
        else if (node instanceof ast_1.FunctionOperation) {
            this.path = [node.name];
            return super.transform(node);
        }
        else if (node instanceof ast_1.Field) {
            try {
                this.path.push(node.name);
                return super.transform(node);
            }
            finally {
                this.path.pop();
            }
        }
        else if (node instanceof ast_1.EnumValue) {
            try {
                this.path.push(node.value);
                return super.transform(node);
            }
            finally {
                this.path.pop();
            }
        }
        else if (node instanceof ast_1.StructType || node instanceof ast_1.EnumType) {
            node.name = this.path.map(s => s[0].toUpperCase() + s.slice(1)).join("");
            const previous = this.names.get(node.name);
            if (previous) {
                if (previous.type.constructor !== node.constructor || JSON.stringify(previous.type) !== JSON.stringify(node)) {
                    throw new visitor_1.SemanticError(`The name of the type '${this.path.join(".")}' at ${node.location} will conflict with '${previous.path.join(".")}' at ${previous.type.location}`);
                }
                return previous.type;
            }
            this.names.set(node.name, { path: [...this.path], type: node });
            return super.transform(node);
        }
        else {
            return super.transform(node);
        }
    }
}
exports.GiveStructAndEnumNamesTransformer = GiveStructAndEnumNamesTransformer;
