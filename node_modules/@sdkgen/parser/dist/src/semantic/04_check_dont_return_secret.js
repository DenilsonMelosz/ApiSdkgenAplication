"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckDontReturnSecretVisitor = void 0;
const visitor_1 = require("./visitor");
const ast_1 = require("../ast");
class CheckDontReturnSecretVisitor extends visitor_1.Visitor {
    constructor() {
        super(...arguments);
        this.isInReturn = false;
        this.path = [];
        this.visited = new Set();
    }
    visit(node) {
        if (this.visited.has(node)) {
            return;
        }
        this.visited.add(node);
        if (node instanceof ast_1.FunctionOperation) {
            this.isInReturn = true;
            this.visited.clear();
            this.path.push(`${node.name}(...)`);
            this.visit(node.returnType);
            this.path.pop();
            this.isInReturn = false;
        }
        else if (node instanceof ast_1.TypeReference) {
            this.visit(node.type);
        }
        else if (node instanceof ast_1.Field) {
            this.path.push(node.name);
            if (this.isInReturn && node.secret) {
                throw new visitor_1.SemanticError(`Can't return a secret value at ${this.path.join(".")} at ${node.location}`);
            }
            super.visit(node);
            this.path.pop();
        }
        else {
            super.visit(node);
        }
    }
}
exports.CheckDontReturnSecretVisitor = CheckDontReturnSecretVisitor;
