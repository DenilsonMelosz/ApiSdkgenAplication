"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpandSpreadsVisitor = void 0;
const visitor_1 = require("./visitor");
const ast_1 = require("../ast");
class ExpandSpreadsVisitor extends visitor_1.Visitor {
    constructor() {
        super(...arguments);
        /*
         * Here we may visit the same struct multiple times
         * We must make sure we only process each one once
         */
        this.processed = new Set();
    }
    expandSpread(fields, fieldsAndSpreads) {
        const fieldIndex = new Map();
        for (const fieldOrSpread of fieldsAndSpreads) {
            let fieldsToAdd;
            if (fieldOrSpread instanceof ast_1.Field) {
                fieldsToAdd = [fieldOrSpread];
            }
            else {
                const struct = fieldOrSpread.typeReference.type;
                if (!(struct instanceof ast_1.StructType)) {
                    throw new visitor_1.SemanticError(`A spread operator can't refer to something that is not a struct, in '${fieldOrSpread.typeReference.name}' at ${fieldOrSpread.location}.`);
                }
                this.visit(struct); // Recursion!
                fieldsToAdd = struct.fields;
            }
            for (const field of fieldsToAdd) {
                const index = fieldIndex.get(field.name);
                if (index) {
                    fields[index] = field;
                }
                else {
                    fieldIndex.set(field.name, fields.length);
                    fields.push(field);
                }
            }
        }
    }
    visit(node) {
        if (node instanceof ast_1.StructType) {
            if (this.processed.has(node)) {
                return;
            }
            this.processed.add(node);
        }
        super.visit(node);
        if (node instanceof ast_1.StructType) {
            this.expandSpread(node.fields, node.fieldsAndSpreads);
            node.fieldsAndSpreads = [];
        }
        else if (node instanceof ast_1.FunctionOperation) {
            this.expandSpread(node.args, node.fieldsAndSpreads);
            node.fieldsAndSpreads = [];
        }
    }
}
exports.ExpandSpreadsVisitor = ExpandSpreadsVisitor;
