import type { Token } from "./token";
import { TokenLocation } from "./token";
export declare abstract class AstNode {
    location: TokenLocation;
    constructor();
    at(token: Token): this;
    atLocation(location: TokenLocation): this;
}
export declare abstract class Type extends AstNode {
    abstract get name(): string;
    toJSON(): unknown;
}
export declare class ErrorNode extends AstNode {
    name: string;
    dataType: Type;
    annotations: Annotation[];
    constructor(name: string, dataType: Type);
}
export declare abstract class Annotation extends AstNode {
}
export declare class DescriptionAnnotation extends Annotation {
    text: string;
    constructor(text: string);
}
export declare class ThrowsAnnotation extends Annotation {
    error: string;
    constructor(error: string);
}
export declare class ArgDescriptionAnnotation extends Annotation {
    argName: string;
    text: string;
    constructor(argName: string, text: string);
}
export declare class RestAnnotation extends Annotation {
    readonly method: string;
    readonly path: string;
    readonly pathVariables: readonly string[];
    readonly queryVariables: readonly string[];
    readonly headers: ReadonlyMap<string, string>;
    readonly bodyVariable: string | null;
    constructor(method: string, path: string, pathVariables: readonly string[], queryVariables: readonly string[], headers: ReadonlyMap<string, string>, bodyVariable: string | null);
}
export declare class HiddenAnnotation extends Annotation {
}
export declare class StatusCodeAnnotation extends Annotation {
    statusCode: number;
    constructor(statusCode: number);
}
export declare abstract class PrimitiveType extends Type {
    toJSON(): string;
}
export declare class StringPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class IntPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class UIntPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class FloatPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class BigIntPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class DatePrimitiveType extends PrimitiveType {
    name: string;
}
export declare class DateTimePrimitiveType extends PrimitiveType {
    name: string;
}
export declare class BoolPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class BytesPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class VoidPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class MoneyPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class DecimalPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class CpfPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class CnpjPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class EmailPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class UrlPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class UuidPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class HexPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class HtmlPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class Base64PrimitiveType extends PrimitiveType {
    name: string;
}
export declare class XmlPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class JsonPrimitiveType extends PrimitiveType {
    name: string;
}
export declare class OptionalType extends Type {
    base: Type;
    constructor(base: Type);
    get name(): string;
}
export declare class ArrayType extends Type {
    base: Type;
    constructor(base: Type);
    get name(): string;
}
export declare class EnumValue extends AstNode {
    value: string;
    annotations: Annotation[];
    struct: StructType | null;
    constructor(value: string);
}
export declare class EnumType extends Type {
    values: EnumValue[];
    name: string;
    constructor(values: EnumValue[]);
    get hasStructValues(): boolean;
}
export declare class Field extends AstNode {
    name: string;
    type: Type;
    secret: boolean;
    annotations: Annotation[];
    constructor(name: string, type: Type, secret?: boolean);
}
export declare class Spread extends AstNode {
    typeReference: TypeReference;
    constructor(typeReference: TypeReference);
}
export declare class TypeReference extends Type {
    name: string;
    type: Type;
    constructor(name: string);
}
export declare class StructType extends Type {
    fieldsAndSpreads: Array<Field | Spread>;
    name: string;
    fields: Field[];
    constructor(fieldsAndSpreads: Array<Field | Spread>);
}
export declare class TypeDefinition extends AstNode {
    name: string;
    type: Type;
    annotations: Annotation[];
    constructor(name: string, type: Type);
}
export declare class FunctionOperation extends AstNode {
    name: string;
    fieldsAndSpreads: Array<Field | Spread>;
    returnType: Type;
    annotations: Annotation[];
    args: Field[];
    constructor(name: string, fieldsAndSpreads: Array<Field | Spread>, returnType: Type);
}
export declare class AstRoot {
    typeDefinitions: TypeDefinition[];
    operations: FunctionOperation[];
    errors: ErrorNode[];
    structTypes: StructType[];
    enumTypes: EnumType[];
    warnings: string[];
    constructor(typeDefinitions?: TypeDefinition[], operations?: FunctionOperation[], errors?: ErrorNode[]);
}
