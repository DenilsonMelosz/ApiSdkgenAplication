"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkgenHttpClient = void 0;
var encode_decode_1 = require("./encode-decode");
function randomBytesHex(len) {
    var hex = "";
    for (var i = 0; i < 2 * len; ++i) {
        hex += "0123456789abcdef"[Math.floor(Math.random() * 16)];
    }
    return hex;
}
var fallbackDeviceId = randomBytesHex(20);
function getDeviceId() {
    try {
        var deviceId = localStorage.getItem("deviceId");
        if (!deviceId) {
            deviceId = fallbackDeviceId;
            localStorage.setItem("deviceId", deviceId);
        }
        return deviceId;
    }
    catch (e) {
        return fallbackDeviceId;
    }
}
function has(target, property) {
    return property in target;
}
var SdkgenHttpClient = /** @class */ (function () {
    function SdkgenHttpClient(baseUrl, astJson, errClasses) {
        this.baseUrl = baseUrl;
        this.astJson = astJson;
        this.errClasses = errClasses;
        this.extra = new Map();
        this.successHook = function () { return undefined; };
        this.errorHook = function () { return undefined; };
    }
    SdkgenHttpClient.prototype.makeRequest = function (functionName, args) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var func, extra, request, encodedRet, ret;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        func = this.astJson.functionTable[functionName];
                        if (!func) {
                            throw new Error("Unknown function ".concat(functionName));
                        }
                        extra = {};
                        // eslint-disable-next-line no-foreach/no-foreach
                        this.extra.forEach(function (value, key) {
                            extra[key] = value;
                        });
                        request = {
                            args: (0, encode_decode_1.encode)(this.astJson.typeTable, "".concat(functionName, ".args"), func.args, args),
                            deviceInfo: {
                                id: getDeviceId(),
                                language: navigator.language,
                                platform: {
                                    browserUserAgent: navigator.userAgent,
                                },
                                timezone: typeof Intl === "object" ? Intl.DateTimeFormat().resolvedOptions().timeZone : null,
                                type: "web",
                                version: (_b = (_a = document.currentScript) === null || _a === void 0 ? void 0 : _a.getAttribute("src")) !== null && _b !== void 0 ? _b : "",
                            },
                            extra: extra,
                            name: functionName,
                            requestId: randomBytesHex(16),
                            version: 3,
                        };
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                var req = new XMLHttpRequest();
                                req.open("POST", "".concat(_this.baseUrl, "/").concat(functionName));
                                req.setRequestHeader("Content-Type", "application/sdkgen");
                                req.onreadystatechange = function () {
                                    if (req.readyState !== 4) {
                                        return;
                                    }
                                    try {
                                        var response = JSON.parse(req.responseText);
                                        try {
                                            if (has(response, "error") && response.error) {
                                                reject(response.error);
                                            }
                                            else {
                                                resolve(has(response, "result") ? response.result : null);
                                            }
                                        }
                                        catch (e) {
                                            var err = { message: "".concat(e), type: "Fatal" };
                                            reject(err);
                                        }
                                    }
                                    catch (e) {
                                        var err = { message: "Falha de conex\u00E3o com o servidor", type: "Fatal" };
                                        reject(err);
                                    }
                                };
                                req.send(JSON.stringify(request));
                            }).catch(function (error) {
                                _this.errorHook(error, functionName, args);
                                if (has(error, "type") && has(error, "message") && typeof error.type === "string" && typeof error.message === "string") {
                                    var errorType_1 = error.type in _this.errClasses ? error.type : "Fatal";
                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                                    var errorClass = _this.errClasses[errorType_1];
                                    var errorJson = _this.astJson.errors.find(function (err) { return (Array.isArray(err) ? err[0] === errorType_1 : err === errorType_1); });
                                    var newError = void 0;
                                    if (errorJson && Array.isArray(errorJson) && has(error, "data")) {
                                        newError = new errorClass(error.message, (0, encode_decode_1.decode)(_this.astJson.typeTable, "".concat(errorType_1, ".data"), errorJson[1], error.data));
                                    }
                                    else {
                                        newError = new errorClass(error.message, undefined);
                                    }
                                    newError.type = errorType_1;
                                    throw newError;
                                }
                                else {
                                    throw error;
                                }
                            })];
                    case 1:
                        encodedRet = _c.sent();
                        ret = (0, encode_decode_1.decode)(this.astJson.typeTable, "".concat(functionName, ".ret"), func.ret, encodedRet);
                        this.successHook(ret, functionName, args);
                        return [2 /*return*/, ret];
                }
            });
        });
    };
    return SdkgenHttpClient;
}());
exports.SdkgenHttpClient = SdkgenHttpClient;
