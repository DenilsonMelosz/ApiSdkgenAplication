"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkgenErrorWithData = exports.SdkgenError = void 0;
var SdkgenError = /** @class */ (function (_super) {
    __extends(SdkgenError, _super);
    function SdkgenError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SdkgenError.prototype, "type", {
        get: function () {
            return this.constructor.name;
        },
        enumerable: false,
        configurable: true
    });
    SdkgenError.prototype.toJSON = function () {
        return {
            message: this.message,
            type: this.type,
        };
    };
    return SdkgenError;
}(Error));
exports.SdkgenError = SdkgenError;
var SdkgenErrorWithData = /** @class */ (function (_super) {
    __extends(SdkgenErrorWithData, _super);
    function SdkgenErrorWithData(message, data) {
        var _this = _super.call(this, message) || this;
        _this.data = data;
        return _this;
    }
    SdkgenErrorWithData.prototype.toJSON = function () {
        return {
            data: this.data,
            message: this.message,
            type: this.type,
        };
    };
    return SdkgenErrorWithData;
}(SdkgenError));
exports.SdkgenErrorWithData = SdkgenErrorWithData;
