"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/require-await */
/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable @typescript-eslint/no-require-imports */
/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-call */
const fs_1 = require("fs");
const parser_1 = require("@sdkgen/parser");
const typescript_generator_1 = require("@sdkgen/typescript-generator");
const axios_1 = __importDefault(require("axios"));
const form_data_1 = __importDefault(require("form-data"));
const src_1 = require("../../src");
const ast = new parser_1.Parser(`${__dirname}/api.sdkgen`).parse();
(0, fs_1.writeFileSync)(`${__dirname}/api.ts`, (0, typescript_generator_1.generateNodeServerSource)(ast).replace(/@sdkgen\/node-runtime/gu, "../../src"));
const { api, TestError } = require(`${__dirname}/api.ts`);
(0, fs_1.unlinkSync)(`${__dirname}/api.ts`);
api.fn.add = async (_ctx, { first, second }) => {
    return `${first}${second}`;
};
api.fn.maybe = async (_ctx, { bin }) => {
    return bin === null ? null : Buffer.from(bin, "hex");
};
api.fn.hex = async (_ctx, { bin }) => {
    return bin.toString("hex");
};
api.fn.obj = async (_ctx, { obj }) => {
    if (obj.val === 0) {
        throw new Error("Value is zero ~ Fatal");
    }
    if (obj.val === -100) {
        throw new TestError("Value is -100 ~ TestError");
    }
    return obj;
};
api.fn.returnArg = async (_ctx, { arg }) => {
    return arg;
};
api.fn.returnNoArg = async (_ctx) => {
    return "no-arg";
};
api.fn.returnArgConcat = async (_ctx, { arg, arg2 }) => {
    return `${arg}${arg2}`;
};
async function readAllStream(stream) {
    return new Promise((resolve, reject) => {
        const chunks = [];
        stream.on("error", err => reject(err));
        stream.on("data", data => chunks.push(Buffer.from(data)));
        stream.on("end", () => resolve(Buffer.concat(chunks)));
    });
}
api.fn.uploadFile = async (ctx) => {
    return Promise.all(ctx.request.files.map(async ({ name, contents }) => ({
        data: await readAllStream(contents),
        name,
    })));
};
api.fn.getHtml = async () => {
    return "<h1>Hello world!</h1>";
};
api.fn.getXml = async () => {
    return "<h1>Hello world!</h1>";
};
(0, fs_1.writeFileSync)(`${__dirname}/nodeClient.ts`, (0, typescript_generator_1.generateNodeClientSource)(ast).replace(/@sdkgen\/node-runtime/gu, "../../src"));
const { ApiClient: NodeApiClient } = require(`${__dirname}/nodeClient.ts`);
(0, fs_1.unlinkSync)(`${__dirname}/nodeClient.ts`);
const nodeClient = new NodeApiClient("http://localhost:8001");
const server = new src_1.SdkgenHttpServer(api, {});
describe("Rest API", () => {
    beforeAll(async () => {
        await server.listen(8001);
    });
    afterAll(async () => {
        await server.close();
    });
    test("add with sdkgen", async () => {
        expect(await nodeClient.add(null, { first: 1, second: "aa" })).toEqual("1aa");
    });
    const table = [
        { method: "GET", path: "/add1/1/aa", result: "1aa" },
        { method: "GET", path: "/add1/1/aa/", result: "1aa" },
        {
            headers: {
                accept: "application/json",
            },
            method: "GET",
            path: "/add1/1/aa",
            result: '"1aa"',
        },
        { method: "GET", path: "/add2&second=aa&first=1", result: "", statusCode: 404 },
        { method: "GET", path: "/add2?second=aa&first=1", result: "1aa" },
        { method: "GET", path: "/add2?first=1&second=aa", result: "1aa" },
        {
            headers: {
                "x-second": "aa",
            },
            method: "GET",
            path: "/add3?first=1",
            result: "1aa",
        },
        {
            headers: {
                accept: "application/json",
                "x-second": "aa",
            },
            method: "GET",
            path: "/add3?first=1",
            result: '"1aa"',
        },
        {
            data: "1",
            headers: {
                "x-second": "aa",
            },
            method: "POST",
            path: "/add4",
            result: "1aa",
        },
        {
            data: "1",
            headers: {
                accept: "application/json",
                "x-second": "aa",
            },
            method: "POST",
            path: "/add4",
            result: '"1aa"',
        },
        {
            data: "aa",
            headers: {
                "x-first": "1",
            },
            method: "POST",
            path: "/add5",
            result: "1aa",
        },
        {
            data: '"aa"',
            headers: {
                "content-type": "application/json",
                "x-first": "1",
            },
            method: "POST",
            path: "/add5",
            result: "1aa",
        },
        {
            data: '"aa"',
            headers: {
                accept: "application/json",
                "content-type": "application/json",
                "x-first": "1",
            },
            method: "POST",
            path: "/add5",
            result: '"1aa"',
        },
        { method: "POST", path: "/add6?second=aa&first=1", result: "1aa" },
        { method: "POST", path: "/add6?first=1&second=aa", result: "1aa" },
        {
            data: "second=aa&first=1",
            headers: { "content-type": "application/x-www-form-urlencoded" },
            method: "POST",
            path: "/add6",
            result: "1aa",
        },
        {
            data: "first=1&second=aa",
            headers: { "content-type": "application/x-www-form-urlencoded" },
            method: "POST",
            path: "/add6",
            result: "1aa",
        },
        {
            method: "GET",
            path: "/maybe",
            result: "",
            statusCode: 404,
        },
        {
            method: "GET",
            path: "/maybe?bin=4d546864",
            result: "MThd",
            resultHeaders: {
                "content-type": "audio/midi",
            },
        },
        {
            method: "GET",
            path: "/maybe?bin=61",
            result: "a",
            resultHeaders: {
                "content-type": "application/octet-stream",
            },
        },
        {
            headers: {
                accept: "application/json",
            },
            method: "GET",
            path: "/maybe?bin=61",
            result: '"YQ=="',
        },
        {
            method: "POST",
            path: "/maybe",
            result: "",
            statusCode: 204,
        },
        {
            data: "61",
            method: "POST",
            path: "/maybe",
            result: "a",
            resultHeaders: {
                "content-type": "application/octet-stream",
            },
        },
        {
            data: "a",
            method: "POST",
            path: "/hex",
            result: "61",
        },
        {
            data: `{"val":15}`,
            method: "POST",
            path: "/obj",
            result: `{"val":15}`,
            resultHeaders: {
                "content-type": "application/json",
            },
        },
        {
            data: `{"val":0}`,
            method: "POST",
            path: "/obj",
            result: `{"message":"Value is zero ~ Fatal","type":"Fatal"}`,
            resultHeaders: {
                "content-type": "application/json",
            },
            statusCode: 500,
        },
        {
            data: `{"val":-100}`,
            method: "POST",
            path: "/obj",
            result: `{"message":"Value is -100 ~ TestError","type":"TestError"}`,
            resultHeaders: {
                "content-type": "application/json",
            },
            statusCode: 400,
        },
        {
            method: "POST",
            path: "/upload",
            result: `[]`,
            resultHeaders: {
                "content-type": "application/json",
            },
            statusCode: 200,
        },
        {
            method: "GET",
            path: "/html",
            result: "<h1>Hello world!</h1>",
            resultHeaders: {
                "content-type": "text/html",
            },
        },
        {
            method: "GET",
            path: "/xml",
            result: "<h1>Hello world!</h1>",
            resultHeaders: {
                "content-type": "text/xml",
            },
        },
        {
            method: "GET",
            path: "/foo/haha/hello",
            result: "haha",
        },
        {
            method: "GET",
            path: "/foo/barhaha/hello",
            result: "haha",
        },
        {
            method: "GET",
            path: "/foo/bar/hello",
            result: "bar",
        },
        {
            method: "GET",
            path: "/foo/baz/hello",
            result: "no-arg",
        },
        {
            method: "GET",
            path: "/foo/haha/hello/hehe/world",
            result: "hahahehe",
        },
        {
            method: "GET",
            path: "/foo/barhaha/hello/barhehe/world",
            result: "hahahehe",
        },
        {
            method: "GET",
            path: "/foo/bar/hello/bar/world",
            result: "barbar",
        },
        (() => {
            const form = new form_data_1.default();
            form.append("file", Buffer.from("Hello"), "test.txt");
            return {
                data: form.getBuffer(),
                headers: Object.assign({}, form.getHeaders()),
                method: "POST",
                path: "/upload",
                result: `[{"name":"test.txt","data":"SGVsbG8="}]`,
                resultHeaders: {
                    "content-type": "application/json",
                },
                statusCode: 200,
            };
        })(),
    ];
    for (const { method, path, result, headers, data, statusCode, resultHeaders } of table) {
        test(`${method} ${path}${headers ? ` with headers ${JSON.stringify(headers)}` : ""}`, async () => {
            const response = await axios_1.default.request({
                data,
                headers,
                method,
                transformResponse: [x => x],
                url: `http://localhost:8001${path}`,
                validateStatus: () => true,
            });
            expect(response.data).toEqual(result);
            expect(response.status).toEqual(statusCode !== null && statusCode !== void 0 ? statusCode : 200);
            expect(response.headers).toMatchObject(resultHeaders !== null && resultHeaders !== void 0 ? resultHeaders : {});
        });
    }
});
