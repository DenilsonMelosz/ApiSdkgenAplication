"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-call */
const src_1 = require("../src");
describe("Encode/Decode", () => {
    test("Process CPF", () => {
        expect((0, src_1.encode)({}, "", "cpf", "067.183.145-36")).toBe("06718314536");
        expect((0, src_1.decode)({}, "", "cpf", "06718314536")).toBe("067.183.145-36");
        expect(() => {
            (0, src_1.encode)({}, "", "cpf", "067.183.145-35");
        }).toThrow();
        expect(() => {
            (0, src_1.decode)({}, "", "cpf", "06718314535");
        }).toThrow();
    });
    test("Process CNPJ", () => {
        expect((0, src_1.encode)({}, "", "cnpj", "18.571.767/0001-36")).toBe("18571767000136");
        expect((0, src_1.decode)({}, "", "cnpj", "18571767000136")).toBe("18.571.767/0001-36");
        expect(() => {
            (0, src_1.encode)({}, "", "cnpj", "18.571.767/0001-35");
        }).toThrow();
        expect(() => {
            (0, src_1.decode)({}, "", "cnpj", "18571767000135");
        }).toThrow();
    });
    test("Process URL", () => {
        expect((0, src_1.encode)({}, "", "url", "https://cubos.io/")).toBe("https://cubos.io/");
        expect((0, src_1.decode)({}, "", "url", "https://cubos.io/")).toBe("https://cubos.io/");
        expect((0, src_1.encode)({}, "", "url", " https:cubos.io/  ")).toBe("https://cubos.io/");
        expect((0, src_1.encode)({}, "", "url", " https:cubos.io  ")).toBe("https://cubos.io/");
        expect(() => {
            (0, src_1.encode)({}, "", "url", "dfbdfb");
        }).toThrow();
        expect(() => {
            (0, src_1.decode)({}, "", "url", "hhh.com");
        }).toThrow();
    });
    test("Process Base64", () => {
        expect((0, src_1.encode)({}, "", "base64", "c3VyZS4=")).toBe("c3VyZS4=");
        expect((0, src_1.encode)({}, "", "base64", "")).toBe("");
        expect(() => {
            (0, src_1.encode)({}, "", "base64", "c3VyZS4");
        }).toThrow();
        expect(() => {
            (0, src_1.encode)({}, "", "base64", " c3VyZS4=");
        }).toThrow();
        expect((0, src_1.decode)({}, "", "base64", "c3VyZS4=")).toBe("c3VyZS4=");
        expect((0, src_1.decode)({}, "", "base64", "")).toBe("");
        expect(() => {
            (0, src_1.decode)({}, "", "base64", "c3VyZS4");
        }).toThrow();
        expect(() => {
            (0, src_1.decode)({}, "", "base64", " c3VyZS4=");
        }).toThrow();
    });
    test("Process Date", () => {
        expect((0, src_1.encode)({}, "", "date", new Date("2020-11-10T00:00:00Z"))).toBe("2020-11-10");
        expect((0, src_1.encode)({}, "", "date", new Date("2020-11-10T15:34:50Z"))).toBe("2020-11-10");
        expect((0, src_1.encode)({}, "", "date", "2020-11-10")).toBe("2020-11-10");
        expect(() => {
            (0, src_1.encode)({}, "", "date", "2020-11-10T15:34:50Z");
        }).toThrow();
        expect(() => {
            (0, src_1.encode)({}, "", "date", "hello world");
        }).toThrow();
        expect(() => {
            (0, src_1.decode)({}, "", "date", "2020-02-30");
        }).toThrow();
        expect(() => {
            (0, src_1.encode)({}, "", "date", new Date(""));
        }).toThrow();
    });
    test("Process Datetime", () => {
        expect((0, src_1.encode)({}, "", "datetime", new Date("2020-11-10T15:34:50Z"))).toBe("2020-11-10T15:34:50.000");
        expect((0, src_1.encode)({}, "", "datetime", "2020-11-10T15:34:50Z")).toBe("2020-11-10T15:34:50.000");
        expect((0, src_1.encode)({}, "", "datetime", "2020-11-10T15:34:50.999")).toBe("2020-11-10T15:34:50.999");
        expect((0, src_1.encode)({}, "", "datetime", "2020-11-10T15:34:50+01:00")).toBe("2020-11-10T14:34:50.000");
        expect((0, src_1.encode)({}, "", "datetime", "2020-11-10T15:34:50.999+01:00")).toBe("2020-11-10T14:34:50.999");
        expect(() => {
            (0, src_1.encode)({}, "", "datetime", "2020-11-10");
        }).toThrow();
        expect(() => {
            (0, src_1.encode)({}, "", "datetime", "hello world");
        }).toThrow();
        expect(() => {
            (0, src_1.encode)({}, "", "datetime", "2020-11-10T15:34:50.999$01:00");
        }).toThrow();
        expect(() => {
            (0, src_1.decode)({}, "", "datetime", "2020-11-10T15:34:50.999$01:00");
        }).toThrow();
        expect((0, src_1.decode)({}, "", "datetime", "2020-11-10T15:34:50Z").getTime()).toBe(new Date("2020-11-10T15:34:50Z").getTime());
        expect((0, src_1.decode)({}, "", "datetime", "2020-11-10T15:34:50.000").getTime()).toBe(new Date("2020-11-10T15:34:50Z").getTime());
        expect(() => {
            (0, src_1.encode)({}, "", "datetime", new Date(""));
        }).toThrow();
    });
    test("Process BigInt", () => {
        expect((0, src_1.encode)({}, "", "bigint", BigInt(10))).toBe("10");
        expect(() => {
            (0, src_1.encode)({}, "", "bigint", 10);
        }).toThrow();
        expect(() => {
            (0, src_1.encode)({}, "", "bigint", "10");
        }).toThrow();
        expect((0, src_1.decode)({}, "", "bigint", 10)).toBe(BigInt(10));
        expect((0, src_1.decode)({}, "", "bigint", "10")).toBe(BigInt(10));
        expect(() => {
            (0, src_1.decode)({}, "", "bigint", "hello world");
        }).toThrow();
    });
    test("Process Enum", () => {
        for (const func of [src_1.encode, src_1.decode]) {
            expect(func({}, "", ["a", "b"], "a")).toBe("a");
            expect(func({}, "", ["a", "b"], "b")).toBe("b");
            expect(() => {
                func({}, "", ["a", "b"], "c");
            }).toThrow();
            expect(() => {
                func({ X: { v: "int" } }, "", ["a", ["b", "X"]], "b");
            }).toThrow();
        }
        expect((0, src_1.encode)({ X: { v: "int" } }, "", ["a", ["b", "X"]], { tag: "a" })).toBe("a");
        expect((0, src_1.encode)({ X: { v: "int" } }, "", ["a", ["b", "X"]], { tag: "b", v: 4 })).toEqual(["b", { v: 4 }]);
        expect((0, src_1.decode)({ X: { v: "int" } }, "", ["a", ["b", "X"]], "a")).toEqual({ tag: "a" });
        expect((0, src_1.decode)({ X: { v: "int" } }, "", ["a", ["b", "X"]], ["b", { v: 4 }])).toEqual({ tag: "b", v: 4 });
    });
});
