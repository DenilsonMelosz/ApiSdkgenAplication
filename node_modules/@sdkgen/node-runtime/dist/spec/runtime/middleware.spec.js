"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/require-await */
/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable @typescript-eslint/no-require-imports */
/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-call */
const fs_1 = require("fs");
const parser_1 = require("@sdkgen/parser");
const typescript_generator_1 = require("@sdkgen/typescript-generator");
const src_1 = require("../../src");
const ast = new parser_1.Parser(`${__dirname}/api.sdkgen`).parse();
(0, fs_1.writeFileSync)(`${__dirname}/middleware-api.ts`, (0, typescript_generator_1.generateNodeServerSource)(ast).replace(/@sdkgen\/node-runtime/gu, "../../src"));
const { api } = require(`${__dirname}/middleware-api.ts`);
(0, fs_1.unlinkSync)(`${__dirname}/middleware-api.ts`);
api.fn.identity = async (_ctx, args) => {
    return args.value;
};
api.fn.sum = async (_ctx, args) => {
    return args.a + args.b;
};
(0, fs_1.writeFileSync)(`${__dirname}/middleware-nodeClient.ts`, (0, typescript_generator_1.generateNodeClientSource)(ast).replace(/@sdkgen\/node-runtime/gu, "../../src"));
const { ApiClient: NodeApiClient } = require(`${__dirname}/middleware-nodeClient.ts`);
(0, fs_1.unlinkSync)(`${__dirname}/middleware-nodeClient.ts`);
const nodeClient = new NodeApiClient("http://localhost:32542");
const server = new src_1.SdkgenHttpServer(api, {});
describe("Middleware", () => {
    beforeAll(async () => {
        await server.listen(32542);
    });
    afterAll(async () => {
        await server.close();
    });
    test("A single middeware can intercept calls", async () => {
        expect(await nodeClient.identity(null, { value: 1 })).toBe(1);
        expect(await nodeClient.identity(null, { value: 2 })).toBe(2);
        expect(await nodeClient.identity(null, { value: 3 })).toBe(3);
        api.use(async (ctx, next) => {
            if (ctx.request.args.value === 2) {
                return {
                    result: 17,
                };
            }
            return next();
        });
        expect(await nodeClient.identity(null, { value: 1 })).toBe(1);
        expect(await nodeClient.identity(null, { value: 2 })).toBe(17);
        expect(await nodeClient.identity(null, { value: 3 })).toBe(3);
        api.middlewares.pop();
    });
    test("Multiple middlewares stack", async () => {
        expect(await nodeClient.identity(null, { value: 1 })).toBe(1);
        expect(await nodeClient.identity(null, { value: 2 })).toBe(2);
        expect(await nodeClient.identity(null, { value: 3 })).toBe(3);
        api.use(async (ctx, next) => {
            if (ctx.request.args.value === 2) {
                return {
                    result: 17,
                };
            }
            return next();
        });
        api.use(async (ctx, next) => {
            if (ctx.request.args.value < 3) {
                return {
                    result: 10,
                };
            }
            return next();
        });
        expect(await nodeClient.identity(null, { value: 1 })).toBe(10);
        expect(await nodeClient.identity(null, { value: 2 })).toBe(17);
        expect(await nodeClient.identity(null, { value: 3 })).toBe(3);
        api.middlewares.pop();
        api.middlewares.pop();
    });
    test("A middeware can redirect calls", async () => {
        expect(await nodeClient.identity(null, { value: 1 })).toBe(1);
        expect(await nodeClient.identity(null, { value: 2 })).toBe(2);
        expect(await nodeClient.identity(null, { value: 3 })).toBe(3);
        api.use(async (ctx, next) => {
            if (ctx.request.name === "identity") {
                ctx.request.name = "sum";
                const { value } = ctx.request.args;
                ctx.request.args = {
                    a: value,
                    b: value,
                };
            }
            return next();
        });
        expect(await nodeClient.identity(null, { value: 1 })).toBe(2);
        expect(await nodeClient.identity(null, { value: 2 })).toBe(4);
        expect(await nodeClient.identity(null, { value: 3 })).toBe(6);
        api.middlewares.pop();
    });
});
