"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/require-await */
/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable @typescript-eslint/no-require-imports */
/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-call */
const fs_1 = require("fs");
const parser_1 = require("@sdkgen/parser");
const typescript_generator_1 = require("@sdkgen/typescript-generator");
const src_1 = require("../../src");
const ast = new parser_1.Parser(`${__dirname}/api.sdkgen`).parse();
(0, fs_1.writeFileSync)(`${__dirname}/errors-api.ts`, (0, typescript_generator_1.generateNodeServerSource)(ast).replace(/@sdkgen\/node-runtime/gu, "../../src"));
const { api, CustomError } = require(`${__dirname}/errors-api.ts`);
(0, fs_1.unlinkSync)(`${__dirname}/errors-api.ts`);
api.fn.throwCustomError = async (_ctx, args) => {
    throw new CustomError("Some message", args);
};
(0, fs_1.writeFileSync)(`${__dirname}/errors-nodeClient.ts`, (0, typescript_generator_1.generateNodeClientSource)(ast).replace(/@sdkgen\/node-runtime/gu, "../../src"));
const { ApiClient: NodeApiClient } = require(`${__dirname}/errors-nodeClient.ts`);
(0, fs_1.unlinkSync)(`${__dirname}/errors-nodeClient.ts`);
const nodeClient = new NodeApiClient("http://localhost:35437");
const server = new src_1.SdkgenHttpServer(api, {});
describe("Errors", () => {
    beforeAll(async () => {
        await server.listen(35437);
    });
    afterAll(async () => {
        await server.close();
    });
    test("Errors are passed correctly", async () => {
        await expect(nodeClient.throwCustomError(null, { value: 235 })).rejects.toMatchObject({
            data: {
                value: 235,
            },
            message: "Some message",
            type: "CustomError",
        });
    });
});
