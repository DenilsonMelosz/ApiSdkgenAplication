"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClient = void 0;
/* eslint-disable */
const http = __importStar(require("http"));
const https = __importStar(require("https"));
const url_1 = require("url");
class ApiClient {
    constructor(baseUrl = "https://", useStaging = false) {
        this.baseUrl = baseUrl;
        this.useStaging = useStaging;
        this.deviceId = null;
    }
    async getUser(id) {
        const args = {
            id: id,
        };
        const ret = await this.makeRequest({ name: "getUser", args });
        return {
            name: ret.name,
            age: ret.age | 0,
        };
    }
    async ping() {
        const ret = await this.makeRequest({ name: "ping", args: {} });
        return ret;
    }
    async setPushToken(token) {
        const args = {
            token: token,
        };
        await this.makeRequest({ name: "setPushToken", args });
    }
    device() {
        const device = {
            type: "node",
        };
        if (this.deviceId)
            device.id = this.deviceId;
        return device;
    }
    randomBytesHex(len) {
        let hex = "";
        for (let i = 0; i < 2 * len; ++i)
            hex += "0123456789abcdef"[Math.floor(Math.random() * 16)];
        return hex;
    }
    async makeRequest({ name, args }) {
        const deviceData = this.device();
        const body = {
            id: this.randomBytesHex(8),
            device: deviceData,
            name: name,
            args: args,
        };
        const url = new url_1.URL(this.baseUrl + (this.useStaging ? "-staging" : "") + "/" + name);
        const options = {
            hostname: url.hostname,
            path: url.pathname,
            port: url.port,
            method: "POST",
        };
        return new Promise((resolve, reject) => {
            const req = (url.protocol === "http:" ? http : https).request(options, resp => {
                let data = "";
                resp.on("data", chunk => {
                    data += chunk;
                });
                resp.on("end", () => {
                    try {
                        const response = JSON.parse(data);
                        try {
                            this.deviceId = response.deviceId;
                            if (response.ok) {
                                resolve(response.result);
                            }
                            else {
                                reject(response.error);
                            }
                        }
                        catch (e) {
                            console.error(e);
                            reject({ type: "Fatal", message: `${e}` });
                        }
                    }
                    catch (e) {
                        console.error(e);
                        reject({
                            type: "BadFormattedResponse",
                            message: `Response couldn't be parsed as JSON (${data}):\n${e}`,
                        });
                    }
                });
            });
            req.on("error", e => {
                console.error(`problem with request: ${e.message}`);
                reject({ type: "Fatal", message: e.toString() });
            });
            // write data to request body
            req.write(JSON.stringify(body));
            req.end();
        });
    }
}
exports.ApiClient = ApiClient;
