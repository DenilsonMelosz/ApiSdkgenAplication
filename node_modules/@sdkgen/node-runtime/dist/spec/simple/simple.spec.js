"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/require-await */
/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable @typescript-eslint/no-require-imports */
/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-call */
const crypto_1 = require("crypto");
const fs_1 = require("fs");
const parser_1 = require("@sdkgen/parser");
const typescript_generator_1 = require("@sdkgen/typescript-generator");
const axios_1 = __importDefault(require("axios"));
const decimal_js_1 = __importDefault(require("decimal.js"));
const src_1 = require("../../src");
const ast = new parser_1.Parser(`${__dirname}/api.sdkgen`).parse();
(0, fs_1.writeFileSync)(`${__dirname}/api.ts`, (0, typescript_generator_1.generateNodeServerSource)(ast).replace(/@sdkgen\/node-runtime/gu, "../../src"));
const { api, SomeError } = require(`${__dirname}/api.ts`);
(0, fs_1.unlinkSync)(`${__dirname}/api.ts`);
let lastCallCtx = null;
api.fn.getUser = async (ctx, { id }) => {
    lastCallCtx = ctx;
    return {
        age: 1,
        name: id,
    };
};
api.fn.identity = async (ctx, { types }) => {
    lastCallCtx = ctx;
    return types;
};
api.fn.throwsError = async () => {
    throw new SomeError("Some message");
};
api.fn.decimalAdd = async (_ctx, { a, b }) => {
    return a.add(b);
};
// ExecSync(`../../cubos/sdkgen/sdkgen ${__dirname + "/api.sdkgen"} -o ${__dirname + "/legacyNodeClient.ts"} -t typescript_nodeclient`);
const { ApiClient: NodeLegacyApiClient } = require(`${__dirname}/legacyNodeClient.ts`);
const nodeLegacyClient = new NodeLegacyApiClient("http://localhost:34367");
(0, fs_1.writeFileSync)(`${__dirname}/nodeClient.ts`, (0, typescript_generator_1.generateNodeClientSource)(ast).replace(/@sdkgen\/node-runtime/gu, "../../src"));
const { ApiClient: NodeApiClient } = require(`${__dirname}/nodeClient.ts`);
(0, fs_1.unlinkSync)(`${__dirname}/nodeClient.ts`);
const nodeClient = new NodeApiClient("http://localhost:34367");
const server = new src_1.SdkgenHttpServer(api, { aaa: true });
describe("Simple API", () => {
    beforeAll(async () => {
        await server.listen(34367);
    });
    afterAll(async () => {
        await server.close();
    });
    test("Healthcheck on 'GET /' only", async () => {
        expect(await axios_1.default.get("http://localhost:34367/")).toMatchObject({ data: { ok: true } });
        await expect(axios_1.default.get("http://localhost:34367/egesg")).rejects.toThrowError();
    });
    test("Can get ast.json at runtime", async () => {
        expect(await axios_1.default.get("http://localhost:34367/ast.json")).toMatchObject({ data: (0, parser_1.astToJson)(ast) });
        server.introspection = false;
        await expect(axios_1.default.get("http://localhost:34367/ast.json")).rejects.toThrowError();
    });
    test("Can make a call from legacy node client", async () => {
        expect(await nodeLegacyClient.getUser("abc")).toEqual({ age: 1, name: "abc" });
        expect(await nodeLegacyClient.getUser("5hdr")).toEqual({ age: 1, name: "5hdr" });
        expect(lastCallCtx.request).toMatchObject({ deviceInfo: { type: "node" }, name: "getUser" });
        expect(lastCallCtx.aaa).toBe(true);
    });
    test("Can make a call from newer node client", async () => {
        expect(await nodeClient.getUser(null, { id: "abc" })).toEqual({ age: 1, name: "abc" });
        expect(await nodeClient.getUser(null, { id: "5hdr" })).toEqual({ age: 1, name: "5hdr" });
        expect(lastCallCtx.request).toMatchObject({ deviceInfo: { type: "node" }, name: "getUser" });
    });
    test("Can process all types as identity", async () => {
        const types = {
            array: [1, 2, 3],
            arrayOfOptionals: [1, null, 3],
            base64: "SGVsbG8K",
            bool: true,
            bytes: (0, crypto_1.randomBytes)(23),
            date: new Date(2019, 12, 3),
            datetime: new Date(),
            enum: "aa",
            float: 22235.6,
            hex: "f84c4d20",
            int: -25,
            json: [{ a: 23, b: "odcbu" }],
            money: 356,
            optional1: null,
            optional2: 2525,
            string: "efvregare",
            struct: { aa: 42 },
            uint: 243,
            uuid: "f84c4d20-eed8-4004-b236-74aaa71fbeca",
        };
        expect(await nodeClient.identity(null, { types })).toEqual(types);
    });
    test("Errors are passed correctly", async () => {
        await expect(nodeClient.throwsError(null, {})).rejects.toMatchObject({
            message: "Some message",
            type: "SomeError",
        });
    });
    test("Can handle decimals", async () => {
        const result = await nodeClient.decimalAdd(null, { a: new decimal_js_1.default("0.1"), b: new decimal_js_1.default("0.2") });
        expect(result.eq(new decimal_js_1.default("0.3"))).toEqual(true);
    });
});
