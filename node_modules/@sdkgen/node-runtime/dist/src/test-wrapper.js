"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiTestWrapper = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-return */
const crypto_1 = require("crypto");
const encode_decode_1 = require("./encode-decode");
const execute_1 = require("./execute");
function apiTestWrapper(api, extraContext = {}) {
    const wrappedApi = new api.constructor();
    for (const functionName of Object.keys(api.astJson.functionTable)) {
        wrappedApi.fn[functionName] = async (partialCtx, args) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            const encodedArgs = (0, encode_decode_1.encode)(api.astJson.typeTable, `fn.${functionName}.args`, api.astJson.functionTable[functionName].args, args);
            const ctx = Object.assign(Object.assign(Object.assign({}, extraContext), partialCtx), { request: {
                    args: encodedArgs,
                    deviceInfo: (_b = (_a = partialCtx.request) === null || _a === void 0 ? void 0 : _a.deviceInfo) !== null && _b !== void 0 ? _b : {
                        fingerprint: null,
                        id: (0, crypto_1.randomBytes)(16).toString("hex"),
                        language: null,
                        platform: null,
                        timezone: null,
                        type: "test",
                        version: null,
                    },
                    extra: (_d = (_c = partialCtx.request) === null || _c === void 0 ? void 0 : _c.extra) !== null && _d !== void 0 ? _d : {},
                    files: (_f = (_e = partialCtx.request) === null || _e === void 0 ? void 0 : _e.files) !== null && _f !== void 0 ? _f : [],
                    headers: (_h = (_g = partialCtx.request) === null || _g === void 0 ? void 0 : _g.headers) !== null && _h !== void 0 ? _h : {},
                    id: (_k = (_j = partialCtx.request) === null || _j === void 0 ? void 0 : _j.id) !== null && _k !== void 0 ? _k : (0, crypto_1.randomBytes)(16).toString("hex"),
                    ip: (_m = (_l = partialCtx.request) === null || _l === void 0 ? void 0 : _l.ip) !== null && _m !== void 0 ? _m : "0.0.0.0",
                    name: functionName,
                    version: 3,
                }, response: {
                    headers: new Map(),
                } });
            const reply = await (0, execute_1.executeRequest)(ctx, api);
            if (reply.error) {
                throw reply.error;
            }
            else {
                const decodedRet = (0, encode_decode_1.decode)(api.astJson.typeTable, `fn.${functionName}.ret`, api.astJson.functionTable[functionName].ret, JSON.parse(JSON.stringify(reply.result)));
                return decodedRet;
            }
        };
    }
    return wrappedApi;
}
exports.apiTestWrapper = apiTestWrapper;
