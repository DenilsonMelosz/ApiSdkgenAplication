"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupSwagger = void 0;
const parser_1 = require("@sdkgen/parser");
const serve_handler_1 = __importDefault(require("serve-handler"));
const swagger_ui_dist_1 = require("swagger-ui-dist");
const swaggerUiAssetPath = (0, swagger_ui_dist_1.getAbsoluteFSPath)();
function objectFromEntries(entries) {
    return Object.assign({}, ...Array.from(entries, ([k, v]) => ({ [k]: v })));
}
function typeToSchema(definitions, type) {
    if (type instanceof parser_1.EnumType) {
        return {
            enum: type.values.map(x => x.value),
            type: "string",
        };
    }
    else if (type instanceof parser_1.StructType) {
        return {
            properties: objectFromEntries(type.fields.map(field => [
                field.name,
                Object.assign({ description: field.annotations
                        .filter(x => x instanceof parser_1.DescriptionAnnotation)
                        .map(x => x.text)
                        .join(" ") || undefined }, typeToSchema(definitions, field.type)),
            ])),
            required: type.fields.filter(f => !(f.type instanceof parser_1.OptionalType)).map(f => f.name),
            type: "object",
            additionalProperties: false,
        };
    }
    else if (type instanceof parser_1.StringPrimitiveType ||
        type instanceof parser_1.UuidPrimitiveType ||
        type instanceof parser_1.HexPrimitiveType ||
        type instanceof parser_1.HtmlPrimitiveType ||
        type instanceof parser_1.Base64PrimitiveType) {
        return {
            type: "string",
        };
    }
    else if (type instanceof parser_1.UrlPrimitiveType) {
        return {
            format: "uri",
            type: "string",
        };
    }
    else if (type instanceof parser_1.DatePrimitiveType) {
        return {
            format: "date",
            type: "string",
        };
    }
    else if (type instanceof parser_1.DateTimePrimitiveType) {
        return {
            format: "date-time",
            type: "string",
        };
    }
    else if (type instanceof parser_1.CpfPrimitiveType) {
        return {
            type: "string",
        };
    }
    else if (type instanceof parser_1.CnpjPrimitiveType) {
        return {
            type: "string",
        };
    }
    else if (type instanceof parser_1.BoolPrimitiveType) {
        return {
            type: "boolean",
        };
    }
    else if (type instanceof parser_1.BytesPrimitiveType) {
        return {
            format: "byte",
            type: "string",
        };
    }
    else if (type instanceof parser_1.IntPrimitiveType) {
        return {
            format: "int32",
            type: "integer",
        };
    }
    else if (type instanceof parser_1.UIntPrimitiveType) {
        return {
            format: "int32",
            minimum: 0,
            type: "integer",
        };
    }
    else if (type instanceof parser_1.MoneyPrimitiveType) {
        return {
            format: "int64",
            type: "integer",
        };
    }
    else if (type instanceof parser_1.FloatPrimitiveType) {
        return {
            type: "number",
        };
    }
    else if (type instanceof parser_1.EmailPrimitiveType) {
        return {
            type: "string",
        };
    }
    else if (type instanceof parser_1.BigIntPrimitiveType) {
        return {
            type: "string",
        };
    }
    else if (type instanceof parser_1.DecimalPrimitiveType) {
        return {
            type: "string",
        };
    }
    else if (type instanceof parser_1.JsonPrimitiveType) {
        return {};
    }
    else if (type instanceof parser_1.OptionalType) {
        return {
            oneOf: [typeToSchema(definitions, type.base), { type: "null" }],
        };
    }
    else if (type instanceof parser_1.ArrayType) {
        return {
            items: typeToSchema(definitions, type.base),
            type: "array",
        };
    }
    else if (type instanceof parser_1.TypeReference) {
        if (!definitions[type.name]) {
            definitions[type.name] = typeToSchema(definitions, type.type);
        }
        return { $ref: `#/components/schemas/${type.name}` };
    }
    throw new Error(`Unhandled type ${type.constructor.name}`);
}
function getSwaggerJson(apiConfig) {
    var _a;
    const schemas = {};
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const paths = {};
    for (const op of apiConfig.ast.operations) {
        const throwAnnotations = op.annotations.filter(ann => ann instanceof parser_1.ThrowsAnnotation);
        let possibleErrors = throwAnnotations.map(ann => apiConfig.ast.errors.find(err => err.name === ann.error)).filter(x => x);
        if (possibleErrors.length === 0) {
            possibleErrors = apiConfig.ast.errors;
        }
        const errorsByStatus = new Map();
        for (const error of possibleErrors) {
            const statusAnnotation = error.annotations.find(ann => ann instanceof parser_1.StatusCodeAnnotation);
            const statusCode = statusAnnotation ? statusAnnotation.statusCode : error.name === "Fatal" ? 500 : 400;
            const errorList = (_a = errorsByStatus.get(statusCode)) !== null && _a !== void 0 ? _a : [];
            errorList.push(error);
            errorsByStatus.set(statusCode, errorList);
        }
        const errorResponses = Object.fromEntries([...errorsByStatus.entries()].map(([status, errors]) => [
            status,
            {
                description: errors
                    .map(error => error.name)
                    .sort((a, b) => a.localeCompare(b))
                    .join("<br>"),
                content: {
                    "application/json": {
                        schema: {
                            anyOf: errors.map(error => ({
                                properties: Object.assign({ message: {
                                        type: "string",
                                    }, type: {
                                        enum: [error.name],
                                        type: "string",
                                    } }, (error.dataType instanceof parser_1.VoidPrimitiveType
                                    ? {}
                                    : {
                                        data: typeToSchema(schemas, error.dataType),
                                    })),
                                required: ["type", "message", ...(error.dataType instanceof parser_1.VoidPrimitiveType ? [] : ["data"])],
                                type: "object",
                                additionalProperties: false,
                            })),
                        },
                    },
                },
            },
        ]));
        for (const ann of op.annotations) {
            if (ann instanceof parser_1.RestAnnotation) {
                if (!paths[ann.path]) {
                    paths[ann.path] = {};
                }
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                paths[ann.path][ann.method.toLowerCase()] = {
                    operationId: op.name,
                    parameters: [
                        ...ann.pathVariables.map(name => ({
                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                            arg: op.args.find(arg => arg.name === name),
                            location: "path",
                            name,
                        })),
                        ...ann.queryVariables.map(name => ({
                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                            arg: op.args.find(arg => arg.name === name),
                            location: "query",
                            name,
                        })),
                        ...[...ann.headers.entries()].map(([header, name]) => ({
                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                            arg: op.args.find(arg => arg.name === name),
                            location: "header",
                            name: header,
                        })),
                    ].map(({ name, location, arg }) => ({
                        description: arg.annotations
                            .filter(x => x instanceof parser_1.DescriptionAnnotation)
                            .map(x => x.text)
                            .join(" ") || undefined,
                        in: location,
                        name,
                        required: !(arg.type instanceof parser_1.OptionalType),
                        schema: typeToSchema(schemas, arg.type),
                    })),
                    requestBody: ann.bodyVariable
                        ? {
                            content: Object.assign(Object.assign({}, (() => {
                                var _a;
                                const bodyType = (_a = op.args.find(arg => arg.name === ann.bodyVariable)) === null || _a === void 0 ? void 0 : _a.type;
                                return bodyType instanceof parser_1.BoolPrimitiveType ||
                                    bodyType instanceof parser_1.IntPrimitiveType ||
                                    bodyType instanceof parser_1.UIntPrimitiveType ||
                                    bodyType instanceof parser_1.FloatPrimitiveType ||
                                    bodyType instanceof parser_1.StringPrimitiveType ||
                                    bodyType instanceof parser_1.DatePrimitiveType ||
                                    bodyType instanceof parser_1.DateTimePrimitiveType ||
                                    bodyType instanceof parser_1.MoneyPrimitiveType ||
                                    bodyType instanceof parser_1.CpfPrimitiveType ||
                                    bodyType instanceof parser_1.CnpjPrimitiveType ||
                                    bodyType instanceof parser_1.EmailPrimitiveType ||
                                    bodyType instanceof parser_1.HtmlPrimitiveType ||
                                    bodyType instanceof parser_1.UuidPrimitiveType ||
                                    bodyType instanceof parser_1.HexPrimitiveType ||
                                    bodyType instanceof parser_1.BytesPrimitiveType ||
                                    bodyType instanceof parser_1.Base64PrimitiveType
                                    ? {
                                        [bodyType instanceof parser_1.HtmlPrimitiveType ? "text/html" : "text/plain"]: {
                                            schema: typeToSchema(schemas, bodyType),
                                        },
                                    }
                                    : {};
                            })()), { "application/json": {
                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                                    schema: typeToSchema(schemas, op.args.find(arg => arg.name === ann.bodyVariable).type),
                                } }),
                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                            required: !(op.args.find(arg => arg.name === ann.bodyVariable).type instanceof parser_1.OptionalType),
                        }
                        : undefined,
                    responses: Object.assign(Object.assign(Object.assign({}, (op.returnType instanceof parser_1.OptionalType || op.returnType instanceof parser_1.VoidPrimitiveType
                        ? { [ann.method === "GET" ? "404" : "204"]: {} }
                        : {})), (op.returnType instanceof parser_1.VoidPrimitiveType
                        ? {}
                        : {
                            200: {
                                description: "",
                                content: Object.assign(Object.assign({}, (() => {
                                    return op.returnType instanceof parser_1.BoolPrimitiveType ||
                                        op.returnType instanceof parser_1.IntPrimitiveType ||
                                        op.returnType instanceof parser_1.UIntPrimitiveType ||
                                        op.returnType instanceof parser_1.FloatPrimitiveType ||
                                        op.returnType instanceof parser_1.StringPrimitiveType ||
                                        op.returnType instanceof parser_1.DatePrimitiveType ||
                                        op.returnType instanceof parser_1.DateTimePrimitiveType ||
                                        op.returnType instanceof parser_1.MoneyPrimitiveType ||
                                        op.returnType instanceof parser_1.CpfPrimitiveType ||
                                        op.returnType instanceof parser_1.CnpjPrimitiveType ||
                                        op.returnType instanceof parser_1.EmailPrimitiveType ||
                                        op.returnType instanceof parser_1.UuidPrimitiveType ||
                                        op.returnType instanceof parser_1.HexPrimitiveType ||
                                        op.returnType instanceof parser_1.BytesPrimitiveType ||
                                        op.returnType instanceof parser_1.Base64PrimitiveType
                                        ? {
                                            "text/plain": {
                                                schema: typeToSchema(schemas, op.returnType),
                                            },
                                        }
                                        : {};
                                })()), { "application/json": {
                                        schema: typeToSchema(schemas, op.returnType),
                                    } }),
                            },
                        })), errorResponses),
                    summary: op.annotations
                        .filter(x => x instanceof parser_1.DescriptionAnnotation)
                        .map(x => x.text)
                        .join(" ") || undefined,
                    tags: [ann.path.split("/")[1]],
                };
            }
        }
    }
    const securitySchemes = {
        bearerAuth: {
            type: "http",
            scheme: "bearer",
        },
    };
    const security = [
        {
            bearerAuth: [],
        },
    ];
    return {
        openapi: "3.0.0",
        info: {
            title: "",
            version: "",
        },
        paths,
        components: {
            schemas,
            securitySchemes,
        },
        security,
    };
}
function setupSwagger(server) {
    server.addHttpHandler("GET", "/swagger", (req, res) => {
        if (!server.introspection) {
            res.statusCode = 404;
            res.end();
            return;
        }
        res.setHeader("content-type", "text/html");
        res.write(`
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <title>Swagger UI</title>
                <link rel="stylesheet" type="text/css" href="/swagger/swagger-ui.css" >
                <link rel="icon" type="image/png" href="/swagger/favicon-32x32.png" sizes="32x32" />
                <link rel="icon" type="image/png" href="/swagger/favicon-16x16.png" sizes="16x16" />
                <style>
                    html {
                        box-sizing: border-box;
                        overflow: -moz-scrollbars-vertical;
                        overflow-y: scroll;
                    }

                    *, *:before, *:after {
                        box-sizing: inherit;
                    }

                    body {
                        margin: 0;
                        background: #fafafa;
                    }

                    .topbar {
                        display: none !important;
                    }
                </style>
            </head>

            <body>
                <div id="swagger-ui"></div>
                <script src="swagger/swagger-ui-bundle.js"> </script>
                <script src="swagger/swagger-ui-standalone-preset.js"> </script>
                <script>
                window.onload = function() {
                    window.ui = SwaggerUIBundle({
                        spec: {
                          ...${JSON.stringify(getSwaggerJson(server.apiConfig))},
                          servers: [{ url: location.origin + location.pathname.replace(/\\/swagger$/, "") }]
                        },
                        dom_id: '#swagger-ui',
                        deepLinking: true,
                        presets: [
                            SwaggerUIBundle.presets.apis,
                            SwaggerUIStandalonePreset,
                        ],
                        plugins: [
                            SwaggerUIBundle.plugins.DownloadUrl,
                        ],
                        layout: "StandaloneLayout"
                    });
                }
            </script>
            </body>
            </html>
        `);
        res.end();
    });
    server.addHttpHandler("GET", /^\/swagger.*/u, (req, res) => {
        if (!server.introspection) {
            res.statusCode = 404;
            res.end();
            return;
        }
        if (req.url) {
            req.url = req.url.replace(/\/swagger/u, "");
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
        (0, serve_handler_1.default)(req, res, {
            cleanUrls: false,
            directoryListing: false,
            etag: true,
            public: swaggerUiAssetPath,
        }).catch(e => {
            console.error(e);
            res.statusCode = 500;
            res.write(`${e}`);
            res.end();
        });
    });
    server.addHttpHandler("GET", "/swagger.json", (req, res) => {
        if (!server.introspection) {
            res.statusCode = 404;
            res.end();
            return;
        }
        try {
            res.write(JSON.stringify(getSwaggerJson(server.apiConfig)));
        }
        catch (error) {
            console.error(error);
            res.statusCode = 500;
        }
        res.end();
    });
}
exports.setupSwagger = setupSwagger;
