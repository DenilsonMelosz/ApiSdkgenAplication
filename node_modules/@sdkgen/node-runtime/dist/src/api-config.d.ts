import type { AstJson, AstRoot } from "@sdkgen/parser";
import type { Context, ContextReply } from "./context";
import type { DeepReadonly } from "./utils";
type Middleware<ExtraContextT> = (ctx: Context & ExtraContextT, next: () => Promise<ContextReply>) => Promise<ContextReply>;
export declare class BaseApiConfig<ExtraContextT = unknown> {
    private _ast;
    get ast(): AstRoot;
    astJson: DeepReadonly<AstJson>;
    fn: Record<string, ((ctx: Context & ExtraContextT, args: any) => Promise<any>) | undefined>;
    readonly middlewares: Array<Middleware<ExtraContextT>>;
    use(middleware: Middleware<ExtraContextT>): void;
}
export {};
