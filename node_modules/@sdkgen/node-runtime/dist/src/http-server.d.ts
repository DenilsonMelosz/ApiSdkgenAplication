/// <reference types="node" />
/// <reference types="node" />
import type { IncomingMessage, Server, ServerResponse } from "http";
import type { BaseApiConfig } from "./api-config";
export declare class SdkgenHttpServer<ExtraContextT = unknown> {
    apiConfig: BaseApiConfig<ExtraContextT>;
    httpServer: Server;
    private readonly headers;
    private readonly healthChecks;
    private handlers;
    dynamicCorsOrigin: boolean;
    introspection: boolean;
    log: (message: string) => void;
    private hasSwagger;
    private ignoredUrlPrefix;
    private extraContext;
    constructor(apiConfig: BaseApiConfig<ExtraContextT>, ...maybeExtraContext: {} extends ExtraContextT ? [{}?] : [ExtraContextT]);
    registerHealthCheck(healthCheck: () => Promise<boolean>): void;
    ignoreUrlPrefix(urlPrefix: string): void;
    listen(port?: number): Promise<void>;
    close(): Promise<void>;
    private enableCors;
    addHeader(header: string, value: string): void;
    addHttpHandler(method: string, matcher: string | RegExp, handler: (req: IncomingMessage, res: ServerResponse, body: Buffer) => void): void;
    private findBestHandler;
    private attachRestHandlers;
    handleRequest: (req: IncomingMessage, res: ServerResponse) => void;
    private handleRequestWithBody;
    private executeRequest;
    private parseRequest;
    private identifyRequestVersion;
    private parseRequestV1;
    private parseRequestV2;
    private parseRequestV3;
    private makeResponseError;
    private writeReply;
}
